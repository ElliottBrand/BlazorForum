@page "/topic/{id:int}/{slug}"
@using Microsoft.AspNetCore.Identity
@using System.Collections.Generic
@using BlazorForum.Pages.Components.Forums.SubComponents
@using BlazorForum.Pages.Components.TypingNotice

@inject HeadBuilderService head
@inject NavigationManager navManager
@inject IManageForumCategories manageForumCategories
@inject IManageForumTopics manageForumTopics
@inject IManageForums manageForums
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime
@inject IManageUsers manageUsers
@inject ForumPostService forumPostService
@implements IDisposable

<ul class="breadcrumb blazorforum-breadcrumb">
    <li class="breadcrumb-item">
        <a href="/forums/">Forums</a>
    </li>
    <li class="breadcrumb-item">
        @{
            var bc = _category != null && _category.Title != null ?
            String.Format("<a href=\"/category/{0}/{1}\">{2}</a>", _category.ForumCategoryId,
            Domain.Utilities.Formatting.UrlFormatting.PrepareUrlText(_category.Title), _category.Title) : "";
            @((MarkupString)bc)
        }
    </li>
    <li class="breadcrumb-item">
        @(_topic != null && _topic.Title != null ? _topic.Title : "")
    </li>
</ul>

@if (_topic == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> @GeneralResources.Loading</em>
    </div>
}
else
{
    <div class="text-right">
        <TopicSubscriptionBtn Id="@id" CurrentUserId="@CurrentUserId" />
    </div>

    <ForumTopicHeader Topic="_topic" />
    <section class="forum-topic-text-section">
        <Topic ThisTopic="@_topic" ForumUpDownVoteEnabled="@_forumUpDownVoteEnabled" CurrentUserId="@CurrentUserId" />
    </section>

    <Posts CurrentUserId="@CurrentUserId" Id="@id" ForumUpDownVoteEnabled="@_forumUpDownVoteEnabled" Category="@_category" ForumPostService="@forumPostService" />

    <TypingNotice TopicId="@id" CurrentUserId="@CurrentUserId" />
}

<section class="mt-4 mb-3">
    <h4>@GeneralResources.PostReply</h4>
    <AuthorizeView>
        <Authorized>
            <PostForm OnPostAdded="UpdatePostsAsync" TopicId="@id" CurrentUserId="@CurrentUserId" TopicSlug="@slug" />
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-secondary">
                <span class="text-secondary">@GeneralResources.MustLoginToPost</span>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</section>


@code {
    [Parameter] public int id { get; set; }
    [Parameter] public string slug { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    private Models.ForumCategory _category;
    private Models.ForumTopic _topic;
    private bool _forumUpDownVoteEnabled;

    protected override async Task OnInitializedAsync()
    {
        forumPostService.Id = id;
        forumPostService.OnPosted += StateHasChanged;

        await LoadTopicAsync();
        SetHeadData();

        _category = await manageForumCategories.GetForumCategoryAsync(_topic.ForumCategoryId);
        var forum = await manageForums.GetForumAsync(_category.ForumId);
        _forumUpDownVoteEnabled = forum.EnableUpDownVotes;

        CurrentUserId = await new Domain.Utilities.Membership.UserInfo(userManager, authStateProvider).GetUserId();
    }

    public void Dispose()
    {
        forumPostService.OnPosted -= StateHasChanged;
    }

    private async Task LoadTopicAsync()
    {
        _topic = await manageForumTopics.GetForumTopicAsync(id);
        if (_topic == null || _topic.IsApproved != true || _topic.IsDeleted == true)
            navManager.NavigateTo("/");

        var user = await userManager.FindByIdAsync(_topic.UserId);
        _topic.UserName = user.UserName;
    }

    private void SetHeadData()
    {
        head.Title = _topic.Title;
        head.Description = _topic.TopicText;
    }

    public async void UpdatePostsAsync()
    {
        // TODO: Adjust to reload for all connected clients/circuits
        // TODO: Update Topic Subscription Button after refreshing posts
        await forumPostService.RefreshPostsAsync();
    }
}

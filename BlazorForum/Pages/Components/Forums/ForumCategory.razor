@page "/category/{id:int}/{slug}"
@using BlazorForum.Pages.Components.Forums.SubComponents

@inject HeadBuilderService head
@inject NavigationManager navManager
@inject IManageForumCategories manageForumCategories
@inject IManageForumTopics manageForumTopics
@inject IManageForumPosts manageForumPosts
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JSRuntime
@inject IManageUsers manageUsers

<ul class="breadcrumb blazorforum-breadcrumb">
    <li class="breadcrumb-item">
        <a href="/forums/">Forums</a>
    </li>
    <li class="breadcrumb-item">
        @(category != null && category.Title != null ? category.Title : "")
    </li>
</ul>

@if (category == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> @GeneralResources.Loading</em>
    </div>
}
else
{
    <header class="forum-category-header">
        <h3>@category.Title</h3>
        <span class="forum-category-description">@category.Description</span>
    </header>

    <ul class="forum-ul">
        @if (topics == null || topics.Count == 0)
        {
            <li>@GeneralResources.NoTopics</li>
        }
        else
        {
            foreach (var topic in topics)
            {
                <li>
                    <div class="home-post-item-container" style="display: flex;">
                        <ItemSupportIcon Topic="topic" />
                        <div style="flex: 1;">
                            <a href="@String.Format("/topic/{0}/{1}",
                                    topic.ForumTopicId, UrlFormatting.PrepareUrlText(topic.Title))">
                                @topic.Title
                            </a>
                            ( @(postCountList != null ? postCountList.Where(p => p.ParentItemId == topic.ForumTopicId)
                                  .FirstOrDefault().ChildCount : 0) )
                            <div class="topic-author">
                                Posted @Domain.Utilities.Formatting.DateTimeFormatting.RelativeDateAgo(topic.PostedDate)
                                by @topic.UserName
                            </div>
                        </div>
                    </div>
                </li>
            }
        }
    </ul>

    <div class="text-center">
        <button class="btn btn-blazorforum @loadMoreVisibility" @onclick="LoadMoreTopicsAsync">
            @GeneralResources.LoadMore
        </button>
    </div>

    <section class="mt-4 mb-3">
        <h4>@GeneralResources.CreateNewTopic</h4>
        <AuthorizeView>
            <Authorized>
                <TopicForm OnTopicAdded="UpdateTopicsAsync" ForumCatId="@id" CurrentUserId="@CurrentUserId" />
            </Authorized>
            <NotAuthorized>
                <div class="alert alert-secondary">
                    <span class="text-secondary">@GeneralResources.LoginToPostTopic</span>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </section>
}

@code {
    [Parameter] public int id { get; set; }
    [Parameter] public string slug { get; set; }
    [Parameter] public string CurrentUserId { get; set; }
    Models.ForumCategory category;
    List<Models.ForumTopic> topics { get; set; }
    List<TopicPostCount> postCountList = new List<TopicPostCount>();
    int maxCount = 10;
    string loadMoreVisibility;

    protected override async Task OnInitializedAsync()
    {
        category = await manageForumCategories.GetForumCategoryAsync(id);
        head.Title = category.Title;
        head.Description = category.Description;
        topics = await manageForumTopics.GetForumCatTopicsAsync(id);

        if (maxCount >= topics.Count)
            loadMoreVisibility = "d-none";

        topics = topics.OrderByDescending(p => p.PostedDate).Take(maxCount).ToList();
        await CheckTopicsForAnswers();
        await CheckSupportForumStatus();

        CurrentUserId = await new Domain.Utilities.Membership.UserInfo(userManager, authStateProvider).GetUserId();
        await new ForumUserHelpers(manageUsers).AddUserToTopicAsync(topics);

        await SetTopicsCount();
    }

    public async void UpdateTopicsAsync()
    {
        topics = await manageForumTopics.GetForumCatTopicsAsync(id);

        if (maxCount >= topics.Count)
            loadMoreVisibility = "d-none";
        else
            loadMoreVisibility = "d-inline-block";

        topics = topics.OrderByDescending(p => p.PostedDate).Take(maxCount).ToList();
        await CheckTopicsForAnswers();
        await CheckSupportForumStatus();

        await new ForumUserHelpers(manageUsers).AddUserToTopicAsync(topics);
        await SetTopicsCount();
        StateHasChanged();
    }

    public async Task LoadMoreTopicsAsync()
    {
        maxCount += 10;
        topics = await manageForumTopics.GetForumCatTopicsAsync(id);

        if (maxCount >= topics.Count)
            loadMoreVisibility = "d-none";
        else
            loadMoreVisibility = "d-inline-block";

        topics = topics.OrderByDescending(p => p.PostedDate).Take(maxCount).ToList();
        await CheckTopicsForAnswers();
        await CheckSupportForumStatus();

        await new ForumUserHelpers(manageUsers).AddUserToTopicAsync(topics);
        StateHasChanged();
    }

    protected async Task SetTopicsCount()
    {
        var topics = await manageForumTopics.GetForumCatTopicsAsync(id);

        foreach (var topic in topics)
        {
            var posts = await manageForumPosts.GetApprovedForumPostsAsync(topic.ForumTopicId);
            var postCount = new TopicPostCount
            {
                ParentItemId = topic.ForumTopicId,
                ChildCount = posts.Count
            };
            postCountList.Add(postCount);
        }
    }

    async Task CheckTopicsForAnswers()
    {
        foreach (var topic in topics)
        {
            var hasAnswer = await manageForumTopics.TopicHasAnswerAsync(topic.ForumTopicId);
            if (hasAnswer)
                topic.HasAnswer = true;
        }
    }

    async Task CheckSupportForumStatus()
    {
        foreach (var topic in topics)
        {
            var inSupportForum = await manageForumTopics.IsInSupportForumAsync(topic.ForumCategoryId);
            if (inSupportForum)
                topic.IsInSupportForum = true;
        }
    }
}

@inject ForumPostService forumPostService

@if (forumPostService.Posts == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> @GeneralResources.Loading</em>
    </div>
}
else if (forumPostService.Posts.Count > 0)
{
    <ul class="forum-post-ul">
        @for (var i = 0; i < (forumPostService.Posts.Count); i++)
        {
            <li>
                <Post CurrentUserId="@CurrentUserId" ForumUpDownVoteEnabled="@ForumUpDownVoteEnabled" ThisPost="@forumPostService.Posts[i]" ForumId="@Category.ForumCategoryId" IsSupportForum="@IsSupportForum" TopicAuthorId="@Topic.UserId" />
            </li>
        }
    </ul>
}

<div class="text-center">
    <button class="btn btn-blazorforum @forumPostService.LoadMoreVisibility" @onclick="LoadMorePostsAsync">@GeneralResources.LoadMore</button>
</div>

@code {
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public Models.ForumTopic Topic { get; set; }
    [Parameter] public bool ForumUpDownVoteEnabled { get; set; }
    [Parameter] public bool IsSupportForum { get; set; }
    [Parameter] public Models.ForumCategory Category { get; set; }

    protected override async Task OnInitializedAsync()
    {
        forumPostService.Id = Topic.ForumTopicId;
        forumPostService.OnPosted += HandleUpdatingPosts;

        await forumPostService.LoadPostsAsync();
    }

    public void Dispose()
    {
        forumPostService.OnPosted -= HandleUpdatingPosts;
    }

    public async Task LoadMorePostsAsync()
    {
        await forumPostService.LoadMorePostsAsync();
        StateHasChanged();
    }

    public void HandleUpdatingPosts(object sender, EventArgs args)
    {
        InvokeAsync(() => StateHasChanged());
    }
}

@inject ForumPostService forumPostService
@inject IJSRuntime jsRuntime

@if (posts == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> @GeneralResources.Loading</em>
    </div>
}
else if (posts.Count > 0)
{
    <ul class="forum-post-ul">
        @for (var i = 0; i < (posts.Count); i++)
        {
            <li>
                <Post CurrentUserId="@CurrentUserId" ForumUpDownVoteEnabled="@ForumUpDownVoteEnabled" ThisPost="@posts[i]" ForumId="@Category.ForumCategoryId" IsSupportForum="@IsSupportForum" TopicAuthorId="@Topic.UserId" />
            </li>
        }
    </ul>
}

<div class="text-center">
    <button class="btn btn-blazorforum @loadMoreVisibility" @onclick="LoadMorePostsAsync">@GeneralResources.LoadMore</button>
</div>

@code {
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public Models.ForumTopic Topic { get; set; }
    [Parameter] public bool ForumUpDownVoteEnabled { get; set; }
    [Parameter] public bool IsSupportForum { get; set; }
    [Parameter] public Models.ForumCategory Category { get; set; }
    string loadMoreVisibility;
    List<Models.ForumPost> posts = new List<Models.ForumPost>();
    int maxCount = 10;

    protected override async Task OnInitializedAsync()
    {
        forumPostService.OnPosted += HandleUpdatingPosts;

        await forumPostService.LoadPostsAsync(Topic.ForumTopicId);
        forumPostService.PostsDictionary.TryGetValue(Topic.ForumTopicId, out posts);

        SetLoadMoreButtonVisibility();

        posts = posts.Take(maxCount).ToList();
    }

    public void Dispose()
    {
        forumPostService.OnPosted -= HandleUpdatingPosts;
    }

    public async Task LoadMorePostsAsync()
    {
        maxCount += 10;

        forumPostService.PostsDictionary.TryGetValue(Topic.ForumTopicId, out posts);

        SetLoadMoreButtonVisibility();

        posts = posts.Take(maxCount).ToList();

        StateHasChanged();
    }

    public void HandleUpdatingPosts(object sender, EventArgs args)
    {
        forumPostService.PostsDictionary.TryGetValue(Topic.ForumTopicId, out posts);

        SetLoadMoreButtonVisibility();

        posts = posts.Take(maxCount).ToList();

        InvokeAsync(() => StateHasChanged());
    }

    void SetLoadMoreButtonVisibility()
    {
        if (maxCount >= posts.Count)
            loadMoreVisibility = "d-none";
        else
            loadMoreVisibility = "d-inline-block";
    }
}

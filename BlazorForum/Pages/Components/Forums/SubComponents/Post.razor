@using BlazorForum.Pages.Components.UpDownVote
@inject IManageForumPosts managePosts
@inject ForumPostService forumPostService
@implements IDisposable

<div class="forum-post-container @(ThisPost.IsAnswer && IsSupportForum ? "is-answer" : "")">
    @if (!_isEditorVisible && ForumUpDownVoteEnabled)
    {
        <UpDownVote PostId="@ThisPost.ForumPostId" UniqueIdentifier="ForumPost" PosterId="@ThisPost.UserId" VoterId="@CurrentUserId" IsAnswer="@ThisPost.IsAnswer" />
    }

<div class="forum-post-content @(_isEditorVisible ? "w-100" : "")">
    @if (_isEditorVisible == false)
        @((MarkupString)ThisPost.PostText)

    @if (ThisPost.UserId == CurrentUserId)
    {
        if (_isEditorVisible == true)
        {
            <PostForm OnPostUpdated="@(() => HideThisEditor())" CurrentUserId="@CurrentUserId" PostToEdit="@ThisPost" OnCancel="@(() => HideThisEditor())"></PostForm>
        }
        else
        {
            <button class="btn btn-sm btn-blazorforum mb-2 mr-1" type="button" @onclick="@(() => _isEditorVisible = true)">Edit</button>
            <PostAnswerBtn IsSupportForum="@IsSupportForum" IsAnswer="@ThisPost.IsAnswer" CurrentUserId="@CurrentUserId" TopicAuthorId="@TopicAuthorId" PostId="@ThisPost.ForumPostId" OnChange="StateChanged" />
        }
    }

    @if (_isEditorVisible == false)
    {
        <div>
            <span class="forum-post-time">
                Posted @DateTimeFormatting.RelativeDateAgo(ThisPost.PostedDate)
                by <a class="post-user-link" href="/profile/@ThisPost.UserName">@ThisPost.UserName</a>
            </span>
            @if (ThisPost.EditedDate != null)
            {
                <span class="forum-post-edit-time">
                    Edited @DateTimeFormatting.RelativeDateAgo(Convert.ToDateTime(ThisPost.EditedDate))
                </span>
            }
        </div>
    }
</div>
</div>

@code {
    [Parameter] public string CurrentUserId { get; set; }
    [Parameter] public ForumPost ThisPost { get; set; }
    [Parameter] public int ForumId { get; set; }
    [Parameter] public string TopicAuthorId { get; set; }
    [Parameter] public bool ForumUpDownVoteEnabled { get; set; }
    [Parameter] public bool IsSupportForum { get; set; }
    private bool _isEditorVisible = false;

    protected override void OnInitialized()
    {
        forumPostService.OnAnswerStatusChanged += HandleAnswerStatusChanged;
    }

    public void Dispose()
    {
        forumPostService.OnAnswerStatusChanged -= HandleAnswerStatusChanged;
    }

    private void HideThisEditor()
    {
        _isEditorVisible = false;
        StateHasChanged();
    }

    void StateChanged()
    {
        forumPostService.RefreshAnswerStatus();
    }

    async void HandleAnswerStatusChanged(object sender, EventArgs args)
    {
        var post = await managePosts.GetForumPostAsync(ThisPost.ForumPostId);
        ThisPost.IsAnswer = post.IsAnswer;
        await InvokeAsync(() => StateHasChanged());
    }
}

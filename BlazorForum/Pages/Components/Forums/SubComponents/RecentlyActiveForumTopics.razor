@inject IManageForumTopics manageForumTopics
@inject IManageForumPosts  manageForumPosts
@inject IManageUsers manageUsers

<header>
    <h3>Recently Active Topics</h3>
</header>
@if (topics == null || postCountList == null)
{
    <div class="mb-2 loading-div">
        <em><i class="oi oi-cog se-spin-icon"></i> @GeneralResources.Loading</em>
    </div>
}
else
{
    <ul class="forum-post-ul">
        @foreach (var topic in topics)
        {
        <li class="p-2">
            <div class="home-post-item-container" style="display: flex;">
                <ItemSupportIcon Topic="topic" />
                <div style="flex: 1;">
                    <h6 class="">
                        <a href="@String.Format("/topic/{0}/{1}", topic.ForumTopicId, UrlFormatting.PrepareUrlText(topic.Title))">@topic.Title</a>
                        <span class="text-nowrap">( @ForumTopicCountHelpers.GetTopicCount(postCountList, topic.ForumTopicId) )</span>
                    </h6>
                    <div class="topic-author">
                        @{ GetRepliedDate(topic); }
                        <a class="post-user-link" href="/profile/@topic.UserName">@topic.UserName</a> replied @postedAgo
                    </div>
                </div>
            </div>
        </li>
        }
    </ul>
}

@code {
    List<Models.ForumTopic> topics { get; set; }
    List<TopicPostCount> postCountList = new List<TopicPostCount>();
    int topicsCount = 10;
    string postedAgo = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        topics = await manageForumTopics.GetActiveTopicsAsync(topicsCount);
        await CheckTopicsForAnswers();
        await CheckSupportForumStatus();

        postCountList = await new ForumTopicCountHelpers(manageForumPosts).GetTopicsPostCountListAsync(topics);
        await new ForumUserHelpers(manageUsers).AddUserToTopicAsync(topics);
    }

    protected void GetRepliedDate(ForumTopic topic)
    {
        var recentPost = topic.ForumPosts.OrderByDescending(p => p.PostedDate).FirstOrDefault();
        if (recentPost != null)
        {
            postedAgo = Domain.Utilities.Formatting.DateTimeFormatting.RelativeDateAgo(recentPost.PostedDate);
        }
    }

    async Task CheckTopicsForAnswers()
    {
        foreach (var topic in topics)
        {
            var hasAnswer = await manageForumTopics.TopicHasAnswerAsync(topic.ForumTopicId);
            if (hasAnswer)
                topic.HasAnswer = true;
        }
    }

    async Task CheckSupportForumStatus()
    {
        foreach (var topic in topics)
        {
            var inSupportForum = await manageForumTopics.IsInSupportForumAsync(topic.ForumCategoryId);
            if (inSupportForum)
                topic.IsInSupportForum = true;
        }
    }
}
@inject IManageUpDownVotes manageUpDownVotes
@inject UpDownVoteState upDownVoteState
@implements IDisposable

<section class="up-down-vote-container">
    <button class="oi oi-arrow-circle-top up-vote up-down-vote-btn @disabledClass" 
            disabled="@disabled" 
            @onclick="(() => OnClickIncrement(1))" 
            title="This post is helpful and respectful"></button>
    <section class="up-down-vote-count">
        @totalCount
    </section>
    <button class="oi oi-arrow-circle-bottom down-vote up-down-vote-btn @disabledClass" 
            disabled="@disabled" 
            @onclick="(() => OnClickIncrement(-1))" 
            title="This post is unhelpful and/or disrespectful"></button>
</section>

@code {
    /// <summary>
    /// The UniqueIdentifier is what keeps the results assigned properly and prevents PostId conflicts. 
    /// NEVER change this after it has been used and logged into storage.
    /// </summary>
    [Parameter] public string UniqueIdentifier { get; set; }
    [Parameter] public int PostId { get; set; }
    [Parameter] public string PosterId { get; set; }
    [Parameter] public string VoterId { get; set; }
    [Parameter] public bool IsAnswer { get; set; }
    int totalCount = 0;
    bool voterHasVoted;
    bool disabled = true;
    string disabledClass = "disabled";

    protected override async Task OnInitializedAsync()
    {
        // Add a delay to prevent issue of correct count not displaying
        await Task.Delay(50);

        upDownVoteState.OnVoteChanged += HandleUpdatingVotesCount;

        totalCount = await manageUpDownVotes.GetPostUpDownVoteCountAsync(PostId, UniqueIdentifier);
        voterHasVoted = await manageUpDownVotes.VoterHasVoted(VoterId, PostId, UniqueIdentifier);

        SetUpDownVoteVisibility();

    }

    public void Dispose()
    {
        upDownVoteState.OnVoteChanged -= HandleUpdatingVotesCount;
    }

    private async Task OnClickIncrement(int voteIncrement)
    {
        if(VoterId != null && voterHasVoted == false)
        {
            var added = await manageUpDownVotes.AddPostUpDownVoteAsync(BuildNewPostVote(voteIncrement));
            if (added)
            {
                upDownVoteState.RefreshVoteCount();
            }
        }
    }

    private Models.UpDownVote BuildNewPostVote(int voteIncrement)
    {
        var newUpDownVote = new Models.UpDownVote
        {
            PostId = PostId,
            PosterId = PosterId,
            VoterId = VoterId,
            UniqueIdentifier = UniqueIdentifier,
            DateVoted = DateTime.Now.ToUniversalTime(),
            VoteIncrement = voteIncrement
        };
        return newUpDownVote;
    }

    private void SetUpDownVoteVisibility()
    {
        if (VoterId != null && PosterId != VoterId && voterHasVoted == false)
        {
            disabled = false;
            disabledClass = string.Empty;
        }
        else
        {
            disabled = true;
            disabledClass = "disabled";
        }
    }

    public async void HandleUpdatingVotesCount(object sender, EventArgs args)
    {
        // It would be nice if this could eventually only update the single UpDownVote component that made the change
        // rather than update all UpDownVote components (making a lot of unnecessary database calls).
        totalCount = await manageUpDownVotes.GetPostUpDownVoteCountAsync(PostId, UniqueIdentifier);
        voterHasVoted = await manageUpDownVotes.VoterHasVoted(VoterId, PostId, UniqueIdentifier);
        SetUpDownVoteVisibility();
        await InvokeAsync(() => StateHasChanged());
    }
}

@inject UserManager<ApplicationUser> userManager 
@inject NavigationManager navigationManager 
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <div class="register-btn-container">
            <a class="logged-in-user-text" href="/profile/@context.User.Identity.Name">Hello, @context.User.Identity.Name!</a>
        </div>
        <div class="login-btn-container">
            <form method="post" action="Identity/Account/LogOut">
                <button type="submit" class="btn btn-sm btn-light">Log out</button>
            </form>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="register-btn-container">
            <a href="Identity/Account/Register" class="btn btn-sm btn-light">Register</a>
        </div>
        <div class="login-btn-container">
            <a href="Identity/Account/Login?returnURL=/@navigationManager.ToBaseRelativePath(navigationManager.Uri)" class="btn btn-sm btn-light">Log in</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    protected override void OnInitialized()
    {
        navigationManager.LocationChanged += UpdateReturnUrl;
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= UpdateReturnUrl;
    }

    void UpdateReturnUrl(object sender, EventArgs args)
    {
        StateHasChanged();
    }
}